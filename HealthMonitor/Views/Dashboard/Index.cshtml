@using Kendo.Mvc.UI;

@{
    ViewData["Title"] = "Dashboard";
    var dataPoints = ViewBag.DataPoints as Dictionary<ErrorLevel, string>;
}

<div class="row form-group"></div>

<div class="row form-group">

    @model IEnumerable<HealthMonitor.Model.Service>

    <div class="form-group"><b>Health Monitor</b><br /></div>
    <table class="table table-bordered table-responsive table-hover">
        <tr>
            <th>Service Name</th>
            <th>Owners</th>
            <th>Downtime</th>
        </tr>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.ServiceName</td>
                <td>@string.Join(", ", item.Owners)</td>
                <td>@item.DownTime ms</td>
            </tr>
        }
    </table>

</div>

<div class="row form-group">

    <div id="chartContainer"></div>
</div>


<script type="text/javascript">

    $(function () {
        var chart = new CanvasJS.Chart("chartContainer", {
            animationEnabled: true,
            title: {
                text: "Health Summary"
            },
            axisX: {
                title: "Micro Services"
            },
            axisY: {
                title: "Percentage"
            },
            data: [
            {
                type: "stackedColumn100",
                color: "Red",
                legendText: "Critical",
                showInLegend: "true",
                indexLabelPlacement: "inside",
                indexLabelFontColor: "white",
                //dataPoints: [
                //    { y: 40, label: "MicroService 1" },
                //    { y: 10, label: "MicroService 2" },
                //    { y: 10, label: "MicroService 3" },
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                dataPoints: @Html.Raw(dataPoints[ErrorLevel.Critical]),
            },
            {
                type: "stackedColumn100",
                color: "Orange",
                legendText: "High",
                showInLegend: "true",
                indexLabelPlacement: "inside",
                indexLabelFontColor: "white",
                //dataPoints: [
                //    { y: 20, label: "MicroService 1" },
                //    { y: 14, label: "MicroService 2" },
                //    { y: 10, label: "MicroService 3" },
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                dataPoints: @Html.Raw(dataPoints[ErrorLevel.High]),
            },
            {
                type: "stackedColumn100",
                color: "Yellow",
                legendText: "Medium",
                showInLegend: "true",
                indexLabelPlacement: "inside",
                indexLabelFontColor: "white",
                //dataPoints: [
                //    { y: 20, label: "MicroService 1" },
                //    { y: 14, label: "MicroService 2" },
                //    { y: 10, label: "MicroService 3" },
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                dataPoints: @Html.Raw(dataPoints[ErrorLevel.Medium]),
            },
            {
                type: "stackedColumn100",
                color: "LightSeaGreen",
                legendText: "Low",
                showInLegend: "true",
                indexLabelPlacement: "inside",
                indexLabelFontColor: "white",
                //dataPoints: [
                //    { y: 20, label: "MicroService 1" },
                //    { y: 14, label: "MicroService 2" },
                //    { y: 10, label: "MicroService 3" },
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                dataPoints: @Html.Raw(dataPoints[ErrorLevel.Low]),
            },
            {
                type: "stackedColumn100",
                color: "Green",
                legendText: "None",
                showInLegend: "true",
                indexLabelPlacement: "inside",
                indexLabelFontColor: "white",
                //dataPoints: [
                //    { y: 20, label: "MicroService 1" },
                //    { y: 14, label: "MicroService 2" },
                //    { y: 10, label: "MicroService 3" },
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                dataPoints: @Html.Raw(dataPoints[ErrorLevel.None]),
            }
            ]
        });
        chart.render();
    });
</script>